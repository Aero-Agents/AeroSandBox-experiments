.. py:class:: MassProperties(mass = None, x_cg = 0.0, y_cg = 0.0, z_cg = 0.0, Ixx = 0.0, Iyy = 0.0, Izz = 0.0, Ixy = 0.0, Iyz = 0.0, Ixz = 0.0)

   Bases: :py:obj:`aerosandbox.common.AeroSandboxObject`


   Mass properties of a rigid 3D object.

   ## Notes on Inertia Tensor Definition

   This class uses the standard mathematical definition of the inertia tensor, which is different from the
   alternative definition used by some CAD and CAE applications (such as SolidWorks, NX, etc.). These differ by a
   sign flip in the products of inertia.

   Specifically, we define the inertia tensor using the standard convention:

       [ I11  I12  I13 ]   [ Ixx  Ixy  Ixz ]   [sum(m*(y^2+z^2))  -sum(m*x*y)      -sum(m*x*z)      ]
   I = [ I21  I22  I23 ] = [ Ixy  Iyy  Iyz ] = [-sum(m*x*y)       sum(m*(x^2+z^2)) -sum(m*y*z)      ]
       [ I31  I32  I33 ]   [ Ixz  Iyz  Izz ]   [-sum(m*x*z)       -sum(m*y*z)       sum(m*(x^2+y^2))]

   Whereas SolidWorks, NX, etc. define the inertia tensor as:

       [ I11  I12  I13 ]   [ Ixx -Ixy -Ixz ]   [sum(m*(y^2+z^2))  -sum(m*x*y)      -sum(m*x*z)      ]
   I = [ I21  I22  I23 ] = [-Ixy  Iyy -Iyz ] = [-sum(m*x*y)       sum(m*(x^2+z^2)) -sum(m*y*z)      ]
       [ I31  I32  I33 ]   [-Ixz -Iyz  Izz ]   [-sum(m*x*z)       -sum(m*y*z)       sum(m*(x^2+y^2))]

   See also: https://en.wikipedia.org/wiki/Moment_of_inertia#Inertia_tensor



   .. py:method:: MassProperties.__repr__()
   .. py:method:: MassProperties.__getitem__(index)
   .. py:method:: MassProperties.__len__()
   .. py:method:: MassProperties.__array__(dtype='O')
   .. py:method:: MassProperties.__neg__()
   .. py:method:: MassProperties.__add__(other)
   .. py:method:: MassProperties.__radd__(other)
   .. py:method:: MassProperties.__sub__(other)
   .. py:method:: MassProperties.__mul__(other)
   .. py:method:: MassProperties.__rmul__(other)
   .. py:method:: MassProperties.__truediv__(other)
   .. py:method:: MassProperties.allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False)
   .. py:method:: MassProperties.inv_inertia_tensor()
   .. py:method:: MassProperties.get_inertia_tensor_about_point(x = 0.0, y = 0.0, z = 0.0, return_tensor = True)
   .. py:method:: MassProperties.is_physically_possible()
   .. py:method:: MassProperties.is_point_mass()
   .. py:method:: MassProperties.generate_possible_set_of_point_masses(method='optimization', check_if_already_a_point_mass = True)
   .. py:method:: MassProperties.export_AVL_mass_file(filename)
.. py:data:: mp1
