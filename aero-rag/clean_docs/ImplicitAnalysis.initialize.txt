.. py:method:: ImplicitAnalysis.initialize(init_method)
   :staticmethod:


   A decorator that should be applied to the __init__ method of ImplicitAnalysis or any subclass of it.

   Usage example:

   >>> class MyAnalysis(ImplicitAnalysis):
   >>>
   >>>     @ImplicitAnalysis.initialize
   >>>     def __init__(self):
   >>>         self.a = self.opti.variable(init_guess = 1)
   >>>         self.b = self.opti.variable(init_guess = 2)
   >>>
   >>>         self.opti.subject_to(
   >>>             self.a == self.b ** 2
   >>>         ) # Add a nonlinear governing equation

   Functionality:

   The basic purpose of this wrapper is to ensure that every ImplicitAnalysis has an `opti` property that points to
   an optimization environment (asb.Opti type) that it can work in.

   How do we obtain an asb.Opti environment to work in? Well, this decorator adds an optional `opti` parameter to
   the __init__ method that it is applied to.

       1. If this `opti` parameter is not provided, then a new empty `asb.Opti` environment is created and stored as
       `ImplicitAnalysis.opti`.

       2. If the `opti` parameter is provided, then we simply assign the given `asb.Opti` environment (which may
       already contain other variables/constraints/objective) to `ImplicitAnalysis.opti`.

   In addition, a property called `ImplicitAnalysis.opti_provided` is stored, which records whether the user
   provided an Opti environment or if one was instead created for them.

   If the user did not provide an Opti environment (Option 1 from our list above), we assume that the user basically
   just wants to perform a normal, single-disciplinary analysis. So, in this case, we proceed to solve the analysis as-is
   and do an in-place substitution of the solution.

   If the user did provide an Opti environment (Option 2 from our list above), we assume that the user might potentially want
   to add other implicit analyses to the problem. So, in this case, we don't solve the analysis, and the user must later
   solve the analysis by calling `sol = opti.solve()` or similar.




.. py:exception:: ImplicitAnalysisInitError(message="\n    Your ImplicitAnalysis object doesn't have an `opti` property!\n    This is almost certainly because you didn't decorate your object's __init__ method with \n    `@ImplicitAnalysis.initialize`, which you should go do.\n                     ")

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


   .. py:attribute:: message
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """
             Your ImplicitAnalysis object doesn't have an `opti` property!
             This is almost certainly because you didn't decorate your object's __init__ method with 
             `@ImplicitAnalysis.initialize`, which you should go do.
                              """

      .. raw:: html

         </details>





.. py:property:: opti


.. py:property:: opti_provided

