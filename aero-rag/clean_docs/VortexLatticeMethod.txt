.. py:class:: VortexLatticeMethod(airplane, op_point, xyz_ref = None, run_symmetric_if_possible = False, verbose = False, spanwise_resolution = 10, spanwise_spacing_function = np.cosspace, chordwise_resolution = 10, chordwise_spacing_function = np.cosspace, vortex_core_radius = 1e-08, align_trailing_vortices_with_wind = False)

   Bases: :py:obj:`aerosandbox.ExplicitAnalysis`


   An explicit (linear) vortex-lattice-method aerodynamics analysis.

   Usage example:
       >>> analysis = asb.VortexLatticeMethod(
       >>>     airplane=my_airplane,
       >>>     op_point=asb.OperatingPoint(
       >>>         velocity=100, # m/s
       >>>         alpha=5, # deg
       >>>         beta=4, # deg
       >>>         p=0.01, # rad/sec
       >>>         q=0.02, # rad/sec
       >>>         r=0.03, # rad/sec
       >>>     )
       >>> )
       >>> aero_data = analysis.run()
       >>> analysis.draw()


   .. py:method:: VortexLatticeMethod.__repr__()
   .. py:method:: VortexLatticeMethod.run()
   .. py:method:: VortexLatticeMethod.run_with_stability_derivatives(alpha=True, beta=True, p=True, q=True, r=True)
   .. py:method:: VortexLatticeMethod.get_induced_velocity_at_points(points)
   .. py:method:: VortexLatticeMethod.get_velocity_at_points(points)
   .. py:method:: VortexLatticeMethod.calculate_streamlines(seed_points = None, n_steps = 300, length = None)
   .. py:method:: VortexLatticeMethod.draw(c = None, cmap = None, colorbar_label = None, show = True, show_kwargs = None, draw_streamlines=True, recalculate_streamlines=False, backend = 'pyvista')