.. py:method:: Wing.mesh_body(method='quad', chordwise_resolution = 36, chordwise_spacing_function_per_side = np.cosspace, mesh_surface = True, mesh_tips = True, mesh_trailing_edge = True, mesh_symmetric = True)

   Meshes the outer mold line surface of the wing.

   Uses the `(points, faces)` standard mesh format. For reference on this format, see the documentation in
   `aerosandbox.geometry.mesh_utilities`.

   Order of faces:

       * On the right wing (or, if `Wing.symmetric` is `False`, just the wing itself):

           * If `mesh_surface` is `True`:

               * First face is nearest the top-side trailing edge of the wing root.

               * Proceeds chordwise, along the upper surface of the wing from back to front. Upon reaching the
               leading edge, continues along the lower surface of the wing from front to back.

               * Then, repeats this process for the next spanwise slice of the wing, and so on.

           * If `mesh_trailing_edge` is `True`:

               * Continues by meshing the trailing edge of the wing. Meshes the inboard trailing edge first, then
               proceeds spanwise to the outboard trailing edge.

           * If `mesh_tips` is `True`:

               * Continues by meshing the wing tips. Meshes the inboard tip first, then meshes the outboard tip.

               * Within each tip, meshes from the

   :param method: One of the following options, as a string:

                  * "tri": Triangular mesh.

                  * "quad": Quadrilateral mesh.
   :param chordwise_resolution: Number of points to use per wing chord, per wing section.
   :param chordwise_spacing_function_per_side: A function that determines how to space points in the chordwise
   :param direction along the top and bottom surfaces. Common values would be `np.linspace` or `np.cosspace`:
   :param :
   :param but it can be any function with the call signature `f:
   :type but it can be any function with the call signature `f: a, b, n
   :param between `a` and `b`. [function]:
   :param mesh_surface: If True, includes the actual wing surface in the mesh.
   :param mesh_tips: If True, includes the wing tips (both on the inboard-most section and on the outboard-most
   :param section) in the mesh.:
   :param mesh_trailing_edge: If True, includes the wing trailing edge in the mesh, if the trailing-edge thickness
   :param is nonzero.:
   :param mesh_symmetric: Has no effect if the wing is not symmetric. If the wing is symmetric this determines whether
   :param the generated mesh is also symmetric:
   :type the generated mesh is also symmetric: right side
   :param or if if only one side of the wing:
   :type or if if only one side of the wing: right side

   Returns: Standard unstructured mesh format: A tuple of `points` and `faces`, where:

       * `points` is a `n x 3` array of points, where `n` is the number of points in the mesh.

       * `faces` is a `m x 3` array of faces if `method` is "tri", or a `m x 4` array of faces if `method` is "quad".

           * Each row of `faces` is a list of indices into `points`, which specifies a face.



