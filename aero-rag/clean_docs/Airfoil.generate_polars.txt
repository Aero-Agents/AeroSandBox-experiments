.. py:method:: Airfoil.generate_polars(alphas=np.linspace(-13, 13, 27), Res=np.geomspace(1000.0, 100000000.0, 12), cache_filename = None, xfoil_kwargs = None, unstructured_interpolated_model_kwargs = None, include_compressibility_effects = True, transonic_buffet_lift_knockdown = 0.3, make_symmetric_polars = False)

   Generates airfoil polar surrogate models (CL, CD, CM functions) from XFoil data and assigns them in-place to
   this Airfoil's polar functions.

   In other words, when this function is run, the following functions will be added (or overwritten) to the instance:
       * Airfoil.CL_function(alpha, Re, mach)
       * Airfoil.CD_function(alpha, Re, mach)
       * Airfoil.CM_function(alpha, Re, mach)

   Where alpha is in degrees.

   Warning: In-place operation! Modifies this Airfoil object by setting Airfoil.CL_function, etc. to the new
   polars.

   :param alphas: The range of alphas to sample from XFoil at. Given in degrees.
   :param Res: The range of Reynolds numbers to sample from XFoil at. Dimensionless.
   :param cache_filename: A path-like filename (ideally a "*.json" file) that can be used to cache the XFoil
                          results, making it much faster to regenerate the results.

                          * If the file does not exist, XFoil will be run, and a cache file will be created.

                          * If the file does exist, XFoil will not be run, and the cache file will be read instead.
   :param xfoil_kwargs: Keyword arguments to pass into the AeroSandbox XFoil module. See the aerosandbox.XFoil
                        constructor for options.
   :param unstructured_interpolated_model_kwargs: Keyword arguments to pass into the UnstructuredInterpolatedModels
                                                  that contain the polars themselves. See the aerosandbox.UnstructuredInterpolatedModel constructor for
                                                  options.
   :param include_compressibility_effects: Includes compressibility effects in the polars, such as wave drag,
                                           mach tuck, CL effects across normal shocks. Note that accuracy here is dubious in the transonic regime
                                           and above - you should really specify your own CL/CD/CM models

   Returns: None (in-place), adds the following functions to the instance:

       * Airfoil.CL_function(alpha, Re, mach)
       * Airfoil.CD_function(alpha, Re, mach)
       * Airfoil.CM_function(alpha, Re, mach)



