.. py:method:: Opti.solve(parameter_mapping = None, max_iter = 1000, max_runtime = 1e+20, callback = None, verbose = True, jit = False, detect_simple_bounds = False, expand = False, options = None, behavior_on_failure = 'raise')

   Solve the optimization problem using CasADi with IPOPT backend.

   :param parameter_mapping: [Optional] Allows you to specify values for parameters.
                             Dictionary where the key is the parameter and the value is the value to be set to.

                             Example: # TODO update syntax for required init_guess
                                 >>> opti = asb.Opti()
                                 >>> x = opti.variable()
                                 >>> p = opti.parameter()
                                 >>> opti.minimize(x ** 2)
                                 >>> opti.subject_to(x >= p)
                                 >>> sol = opti.solve(
                                 >>>     {
                                 >>>         p: 5 # Sets the value of parameter p to 5, then solves.
                                 >>>     }
                                 >>> )
   :param max_iter: [Optional] The maximum number of iterations allowed before giving up.
   :param max_runtime: [Optional] Gives the maximum allowable runtime before giving up.
   :param callback: [Optional] A function to be called at each iteration of the optimization algorithm.
                    Useful for printing progress or displaying intermediate results.

                    The callback function `func` should have the syntax `func(iteration_number)`, where iteration_number
                    is an integer corresponding to the current iteration number. In order to access intermediate
                    quantities of optimization variables (e.g. for plotting), use the `Opti.debug.value(x)` syntax for
                    each variable `x`.
   :param verbose: Controls the verbosity of the solver. If True, IPOPT will print its progress to the console.
   :param jit: Experimental. If True, the optimization problem will be compiled to C++ and then JIT-compiled
               using the CasADi JIT compiler. This can lead to significant speedups, but may also lead to
               unexpected behavior, and may not work on all platforms.
   :param options: [Optional] A dictionary of options to pass to IPOPT. See the IPOPT documentation for a list of
                   available options.
   :param behavior_on_failure: [Optional] What should we do if the optimization fails? Options are:

                               * "raise": Raise an exception. This is the default behavior.

                               * "return_last": Returns the solution from the last iteration, and raise a warning.

                                   NOTE: The returned solution may not be feasible! (It also may not be optimal.)

   Returns: An OptiSol object that contains the solved optimization problem. To extract values, use
       my_optisol(variable).

       Example:
           >>> sol = opti.solve()
           >>> x_opt = sol(x) # Get the value of variable x at the optimum.



